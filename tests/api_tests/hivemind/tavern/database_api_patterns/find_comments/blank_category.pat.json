{
  "comments": [
    {
      "abs_rshares": 0,
      "allow_curation_rewards": true,
      "allow_replies": true,
      "allow_votes": true,
      "author": "xeroc",
      "author_rewards": 9197,
      "beneficiaries": [],
      "body": "This article desribes the API of the STEEM full node (**not** of the wallet API).\n\n## Prerequisits\n\nThis article assumes that you have a full node running and listening to port ``8092``, locally. You can achieve this by\n\n```\n./programs/steemd/steemd --rpc-endpoint=127.0.0.1:8092\n```\n\nWe open up the RPC endpoint so that we can interface with the node using RPC-JSON calls.\n\n## Call Format\n\nIn Graphene, RPC calls are state-less and accessible via regular JSON formated RPC-HTTP-calls. The correct structure of the JSON call is\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1\n    \"method\": \"get_account\",\n    \"params\": [[\"xeroc\", \"steemit\"]],\n}\n```\n\nThe `get_accounts` call is available in the full node's API and takes only one argument which is an array of account ids (here: `[\"xeroc\", \"steemit\"]`).\n\n### Example Call with `curl`\n\nSuch as call can be submitted via ``curl``:\n\n```sh\ncurl --data '{\"jsonrpc\": \"2.0\", \"method\": \"get_accounts\", \"params\": [[\"xeroc\",\"steemit\"]], \"id\": 1}' http://127.0.0.1:8090/rpc\n```\n\n## Successful Calls\n\n\nThe API will return a properly JSON formated response carrying the same ``id``\nas the request to distinguish subsequent calls.\n\n```json\n{ \"id\":1, \"result\": \"data\" }\n```\n\n## Errors\n\nIn case of an error, the resulting answer will carry an ``error`` attribute and\na detailed description:\n\n```json\n{\n  \"id\": 0\n  \"error\": {\n    \"data\": {\n      \"code\": error-code,\n      \"name\": \" .. name of exception ..\"\n      \"message\": \" .. message of exception ..\",\n      \"stack\": [ .. stack trace .. ],\n    },\n    \"code\": 1,\n  },\n}\n```\n\n## Available Calls\n\nEven though, the `help` call does not exist, it gives us an error message that contains all available API calls in the stack trace:\n\n```\ncurl --data '{\"jsonrpc\": \"2.0\", \"method\": \"help\", \"params\": [], \"id\": 1}' http://127.0.0.1:8090/rpc\n```\n```json\n{\n  \"id\": 1,\n  \"error\": {\n    \"message\": <...>,\n    \"data\": {\n      \"message\": \"Assert Exception\",\n      \"name\": \"assert_exception\",\n      \"stack\": [\n        {\n          \"data\": {\n            \"name\": \"help\",\n            \"api\": {\n              \"set_subscribe_callback\": 0,\n              \"get_dynamic_global_properties\": 12,\n              \"get_accounts\": 17,\n              \"get_active_categories\": 9,\n              \"get_account_references\": 18,\n              \"get_trending_categories\": 7,\n              \"get_content\": 36,\n              \"get_state\": 6,\n              \"get_discussions_by_total_pending_payout\": 38,\n              \"cancel_all_subscriptions\": 3,\n              \"get_block_header\": 4,\n              \"get_active_votes\": 35,\n              \"get_current_median_history_price\": 15,\n              \"lookup_witness_accounts\": 26,\n              \"verify_account_authority\": 34,\n              \"get_key_references\": 16,\n              \"set_pending_transaction_callback\": 1,\n              \"get_required_signatures\": 31,\n              \"get_recent_categories\": 10,\n              \"get_order_book\": 28,\n              \"lookup_accounts\": 20,\n              \"get_account_history\": 23,\n              \"get_chain_properties\": 13,\n              \"get_feed_history\": 14,\n              \"verify_authority\": 33,\n              \"get_discussions_by_last_update\": 40,\n              \"get_conversion_requests\": 22,\n              \"get_discussions_in_category_by_last_update\": 41,\n              \"get_block\": 5,\n              \"get_witness_count\": 27,\n              \"get_best_categories\": 8,\n              \"get_potential_signatures\": 32,\n              \"lookup_account_names\": 19,\n              \"get_transaction\": 30,\n              \"get_witnesses\": 24,\n              \"get_witness_by_account\": 25,\n              \"get_account_count\": 21,\n              \"get_transaction_hex\": 29,\n              \"get_content_replies\": 37,\n              \"get_discussions_in_category_by_total_pending_payout\": 39,\n              \"get_miner_queue\": 43,\n              \"get_active_witnesses\": 42,\n              \"set_block_applied_callback\": 2,\n              \"get_config\": 11\n            }\n          },\n          \"context\": {\n            \"line\": 109,\n            \"hostname\": \"\",\n            \"timestamp\": \"2016-04-13T16:15:17\",\n            \"method\": \"call\",\n            \"thread_name\": \"th_a\",\n            \"level\": \"error\",\n            \"file\": \"api_connection.hpp\"\n          },\n          \"format\": \"itr != _by_name.end(): no method with name '${name}'\"\n        }\n      ],\n      \"code\": 10\n    },\n    \"code\": 1\n  }\n}\n```\n\nFurther documentation about the calls can be found in the sources in [libraries/app/include/steemit/app/database_api.hpp](https://github.com/steemit/steem/blob/master/libraries/app/include/steemit/app/database_api.hpp).\n",
      "cashout_time": "1969-12-31T23:59:59",
      "category": "",
      "children": 3,
      "children_abs_rshares": 0,
      "created": "2016-04-13T16:25:15",
      "curator_payout_value": {
        "amount": "493",
        "nai": "@@000000013",
        "precision": 3
      },
      "depth": 0,
      "id": 130,
      "json_metadata": "{}",
      "last_payout": "2016-08-24T05:37:24",
      "last_update": "2016-04-13T16:25:15",
      "max_accepted_payout": {
        "amount": "1000000000",
        "nai": "@@000000013",
        "precision": 3
      },
      "max_cashout_time": "1969-12-31T23:59:59",
      "net_rshares": 0,
      "net_votes": 29,
      "parent_author": "",
      "parent_permlink": "",
      "percent_hbd": 10000,
      "permlink": "steem-api",
      "reward_weight": 10000,
      "root_author": "xeroc",
      "root_permlink": "steem-api",
      "title": "Steem API",
      "total_payout_value": {
        "amount": "2165",
        "nai": "@@000000013",
        "precision": 3
      },
      "total_vote_weight": 0,
      "vote_rshares": 0
    },
    {
      "abs_rshares": 0,
      "allow_curation_rewards": true,
      "allow_replies": true,
      "allow_votes": true,
      "author": "xeroc",
      "author_rewards": 83368,
      "beneficiaries": [],
      "body": "In [an other article](/steem/@xeroc/steem-api) we have discussed the underlying structure of the STEEM API and can now look into monitoring account deposits.\n\n## Running a Node\n\nFirst, we need to run a full node in a trusted environment:\n\n      ./programs/steemd/steemd --rpc-endpoint=127.0.0.1:8092\n\nWe open up the RPC endpoint so that we can interface with the node using RPC-JSON calls.\n\n## Blockchain Parameters and Last Block\n\nThe RPC call `get_config` will return the configuration of the blockchain which contains the block interval in seconds. By calling `get_dynamic_global_properties`, we obtain the current head block number as well as the last irreversible block number. The difference between both is that the last block is last block that has been produced by the network and has thus been confirmed by the block producer. The last irreversible block is that block that has been confirmed by sufficient many block producers so that it can no longer be modified without a hard fork. Every block older than the last reversible block is equivalent to a checkpoint in Bitcoin. Typically they are about 30 to 50 blocks behind the head block.\n\nA particular block can be obtained via the `get_block <blocknumber>` call and takes the form shown above.\n\n## Processing Block Data\n\nSince the content of a block is unencrypted, all it takes to monitor an account is processing of the content of each block.\n\n## Example\n\nThe following will show example implementations for monitoring a specific account.\n\n```python\n# This library can be obtain from https://github.com/xeroc/python-steem\n\nfrom steemrpc import SteemRPC\nfrom pprint import pprint\nimport time\n\n\"\"\"\n   Connection Parameters to steemd daemon.\n\n   Start the steemd daemon with the rpc-endpoint parameter:\n\n      ./programs/steemd/steemd --rpc-endpoint=127.0.0.1:8092\n\n    This opens up a RPC port (e.g. at 8092). Currently, authentication\n    is not yet available, thus, we recommend to restrict access to\n    localhost. Later we will allow authentication via username and\n    passpword (both empty now).\n\n\"\"\"\nrpc = SteemRPC(\"localhost\", 8092, \"\", \"\")\n\n\"\"\"\n    Last Block that you have process in your backend.\n    Processing will continue at `last_block + 1`\n\"\"\"\nlast_block = 160900\n\n\"\"\"\n    Deposit account name to monitor\n\"\"\"\nwatch_account = \"world\"\n\n\ndef process_block(block, blockid):\n    \"\"\"\n        This call processes a block which can carry many transactions\n\n        :param Object block: block data\n        :param number blockid: block number\n    \"\"\"\n    if \"transactions\" in block:\n        for tx in block[\"transactions\"]:\n            #: Parse operations\n            for opObj in tx[\"operations\"]:\n                #: Each operation is an array of the form\n                #:    [type, {data}]\n                opType = opObj[0]\n                op = opObj[1]\n\n                # we here want to only parse transfers\n                if opType == \"transfer\":\n                    process_transfer(op, block, blockid)\n\n\ndef process_transfer(op, block, blockid):\n    \"\"\"\n        We here process the actual transfer operation.\n    \"\"\"\n    if op[\"to\"] == watch_account:\n        print(\n            \"%d | %s | %s -> %s: %s -- %s\" % (\n                blockid,\n                block[\"timestamp\"],\n                op[\"from\"],\n                op[\"to\"],\n                op[\"amount\"],\n                op[\"memo\"]\n            )\n        )\n\n\nif __name__ == '__main__':\n    # Let's find out how often blocks are generated!\n    config = rpc.get_config()\n    block_interval = config[\"STEEMIT_BLOCK_INTERVAL\"]\n\n    # We are going to loop indefinitely\n    while True:\n\n        # Get chain properies to identify the \n        # head/last reversible block\n        props = rpc.get_dynamic_global_properties()\n\n        # Get block number\n        # We here have the choice between\n        #  * head_block_number: the last block\n        #  * last_irreversible_block_num: the block that is confirmed by\n        #    2/3 of all block producers and is thus irreversible!\n        # We recommend to use the latter!\n        # block_number = props['head_block_number']\n        block_number = props['last_irreversible_block_num']\n\n        # We loop through all blocks we may have missed since the last\n        # block defined above\n        while (block_number - last_block) > 0:\n            last_block += 1\n\n            # Get full block\n            block = rpc.get_block(last_block)\n\n            # Process block\n            process_block(block, last_block)\n\n        # Sleep for one block\n        time.sleep(block_interval)\n```",
      "cashout_time": "1969-12-31T23:59:59",
      "category": "",
      "children": 2,
      "children_abs_rshares": 0,
      "created": "2016-04-13T16:22:45",
      "curator_payout_value": {
        "amount": "18338",
        "nai": "@@000000013",
        "precision": 3
      },
      "depth": 0,
      "id": 129,
      "json_metadata": "{}",
      "last_payout": "2016-08-03T00:00:06",
      "last_update": "2016-05-15T16:06:06",
      "max_accepted_payout": {
        "amount": "1000000000",
        "nai": "@@000000013",
        "precision": 3
      },
      "max_cashout_time": "1969-12-31T23:59:59",
      "net_rshares": 0,
      "net_votes": 16,
      "parent_author": "",
      "parent_permlink": "",
      "percent_hbd": 10000,
      "permlink": "how-to-monitor-an-account-on-steem",
      "reward_weight": 10000,
      "root_author": "xeroc",
      "root_permlink": "how-to-monitor-an-account-on-steem",
      "title": "Monitoring Account Deposits in Steem Using Python",
      "total_payout_value": {
        "amount": "18340",
        "nai": "@@000000013",
        "precision": 3
      },
      "total_vote_weight": 0,
      "vote_rshares": 0
    }
  ]
}
